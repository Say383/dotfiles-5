#+TITLE: Notes
#+SUBTITLE: Notes on my personal dotfiles
#+AUTHOR: Ben Mezger
#+EMAIL: me@benmezger.nl
#+DATE: <2021-05-28 Fri 23:37>

#+HTML_DOCTYPE: xhtml5
#+HTML_HTML5_FANCY:

# Hugo config
#+DRAFT: false
#+HUGO_AUTO_SET_LASTMOD: t

* Development notes
** System dependencies :deps:
*** Installing Homebrew :osx:
#+BEGIN_SRC bash :noweb-ref homebrew-install
curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh
#+END_SRC

*** Installing Chezmoi with Homebrew :osx:
#+BEGIN_SRC bash :noweb-ref chezmoi-brew-install
brew install chezmoi
#+END_SRC

*** Installing chezmoi without Homebrew :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref chezmoi-install
curl -sfL https://git.io/chezmoi | sh
#+END_SRC

*** Install Homebrew packages :osx:
=brew bundle= requires either =Brewfile= to be defined at the
=HOMEBREW_BUNDLE_FILE='s env, or passed with =--file== flag or be at the same
directory the command is ran.
#+BEGIN_SRC bash :noweb-ref brew-bundle
brew bundle
#+END_SRC
*** Install =mute app= :osx:
#+BEGIN_SRC bash :noweb-ref muteapp-install
curl https://github.com/pixel-point/mute-me/releases/download/v2.0.0-rc2/mute-me-v2.0.0-rc2.zip \
        -L -o /tmp/muteme.zip

unzip -o /tmp/muteme.zip -d /tmp/
mv "/tmp/Mute Me.app" "$HOME/Applications/Mute Me.app"
#+END_SRC

*** Installing Chezmoi with Pacman :archlinux:
#+BEGIN_SRC bash :noweb-ref chezmoi-pacman-install
sudo pacman -S chezmoi --noconfirm
#+END_SRC

*** Installing Pacman packages :archlinux:
For an example of a Pacman package file, see [[file:Pacfile][Pacfile]]. The following, assumes
Pacfile is set in an env variable called =PACMAN_BUNDLE_FILE=.

#+BEGIN_SRC bash :noweb-ref pacman-bundle
sudo pacman -Syy
sudo pacman -S --noconfirm --needed - <"$PACMAN_BUNDLE_FILE"
#+END_SRC

*** Install Paru (AUR wrapper) :archlinux:
#+BEGIN_SRC bash :noweb-ref aur-paru-install
PARU_PATH=/tmp/paru

git clone https://aur.archlinux.org/paru.git $PARU_PATH
(cd $PARU_PATH && makepkg -si)
#+END_SRC

*** Install AUR packages :archlinux:
For an example of a AUR package file, see [[file:Aurfile][Aurfile]]. The following, assumes
Aurfile is set in an env variable called =AUR_BUNDLE_FILE=.
#+BEGIN_SRC bash :noweb-ref aur-package-install
paru -S --nouseask - <"$AUR_BUNDLE_FILE"
#+END_SRC

*** Install Git repositories :archlinux:osx:
**** Install Zplug :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref zplug-install
ZPLUG_PATH="$HOME/.zplug"
if [ ! -d "$ZPLUG_PATH" ]; then
	git clone https://github.com/zplug/zplug "$ZPLUG_PATH"
fi
#+END_SRC

**** Install Tmux TPM :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref tmux-tpm-install
TMUX_TPM_PATH="$HOME/.tmux/plugins/tpm"
if [ ! -d "$TMUX_TPM_PATH" ]; then
	mkdir -p "$TMUX_TPM_PATH"
	git clone https://github.com/tmux-plugin/tpm "$TMUX_TPM_PATH"
fi
#+END_SRC

**** Install Vim Plug :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref vim-plug-install
VIM_PLUG_PATH="$HOME/.vim/autoload"
if [ ! -d "$VIM_PLUG_PATH" ]; then
	curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
		https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

	if ! [ -x "$(command -v nvim)" ]; then
		nvim +PlugInstall +qall --headless
		nvim +UpdateRemotePlugins +qall --headless
	fi
fi
#+END_SRC

**** Install Base-16 :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref base16-install
BASE16_PATH="$HOME/.config/base16-shell"
if [ ! -d "$BASE16_PATH" ]; then
	mkdir -p "$BASE16_PATH"
	git clone https://github.com/chriskempson/base16-shell "$BASE16_PATH"
fi
#+END_SRC
**** Install Emacs Doom :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref emacs-doom-install
EMACS_PATH="$HOME/.emacs.d"
if [ ! -d "$EMACS_PATH" ]; then
	mkdir -p "$EMACS_PATH"
	git clone --depth 1 https://github.com/hlissner/doom-emacs "$EMACS_PATH"
	"$EMACS_PATH"/bin/doom -y install
else
	"$EMACS_PATH"/bin/doom -y sync -e
fi
#+END_SRC

** System configuration :sysconf:
*** OSX :osx:
Some of this configurations are from [[https://github.com/mathiasbynens/dotfiles/blob/main/.macos][this]] link.

**** Always show scrollbar
#+BEGIN_SRC bash :noweb-ref osx-scrollbar-conf
ansi --green "Always show scrollbars"
defaults write NSGlobalDomain AppleShowScrollBars -string "Always"
#+END_SRC

**** Don't save to iCloud by default, use disk instead
#+BEGIN_SRC bash :noweb-ref osx-disable-icloud-conf
ansi --green "Save to disk and not in iCloud by default"
defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false
#+END_SRC

**** Quit printer when all jobs complete
#+BEGIN_SRC bash :noweb-ref osx-printer-conf
ansi --green "Quit printer app when jobs are completed"
defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true
#+END_SRC

**** Disable the "Are you sure you want to open this app?" dialog
#+BEGIN_SRC bash :noweb-ref osx-disable-app-dialog-conf
ansi --green "Disable the “Are you sure you want to open this application?” dialog"
defaults write com.apple.LaunchServices LSQuarantine -bool false
#+END_SRC

**** Enable trackpad tap to click for this user and for the login screen
#+BEGIN_SRC bash :noweb-ref osx-tap-to-click-conf
ansi --green "Trackpad: enable tap to click for this user and for the login screen"
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
#+END_SRC

**** Increase sound quality for Bluetooth headphones
#+BEGIN_SRC bash :noweb-ref osx-bluetooth-quality-conf
ansi --green "Increase sound quality for Bluetooth headphones/headsets"
defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40
#+END_SRC
**** Set fast keyboard repeat rate
#+BEGIN_SRC bash :noweb-ref osx-keyboard-rate-conf
ansi --green "Set a blazingly fast keyboard repeat rate"
defaults write NSGlobalDomain KeyRepeat -int 1
defaults write NSGlobalDomain InitialKeyRepeat -int 10
#+END_SRC

**** Require password immediately after sleep or screen saver
#+BEGIN_SRC bash :noweb-ref osx-require-passwd-conf
ansi --green "Require password immediately after sleep or screen saver begins"
defaults write com.apple.screensaver askForPassword -int 1
defaults write com.apple.screensaver askForPasswordDelay -int 0
#+END_SRC
**** Save screenshots to the desktop
#+BEGIN_SRC bash :noweb-ref osx-screenshot-to-desktop-conf
ansi --green "Save screenshots to the desktop"
defaults write com.apple.screencapture location -string "${HOME}/Desktop"
#+END_SRC
**** Save screenshots in PNG format
Other options: BMP, GIF, JPG, PDF, TIFF
#+BEGIN_SRC bash :noweb-ref osx-screenshot-format-conf
ansi --green "Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)"
defaults write com.apple.screencapture type -string "png"
#+END_SRC

**** Show hidden files in Finder by default
#+BEGIN_SRC bash :noweb-ref osx-show-hidden-files-conf
ansi --green "Finder: show hidden files by default"
defaults write com.apple.finder AppleShowAllFiles -bool true
#+END_SRC

**** Show all filename extensions in Finder
#+BEGIN_SRC bash :noweb-ref osx-finder-show-extensions-conf
ansi --green "Finder: show all filename extensions"
defaults write NSGlobalDomain AppleShowAllExtensions -bool true
#+END_SRC

**** Avoid creating =.DS_Store= files on network or USB volumes
#+BEGIN_SRC bash :noweb-ref osx-avoid-ds-store-files-conf
ansi --green "Avoid creating .DS_Store files on network or USB volumes"
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true
#+END_SRC

**** Check for daily for software updates
#+BEGIN_SRC bash :noweb-ref osx-daily-updates-conf
ansi --green "Set to check daily instead of weekly"
defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1
#+END_SRC

**** Set default clock format
#+BEGIN_SRC bash :noweb-ref osx-clock-format-conf
ansi --green "Set default clock format"
defaults write com.apple.menuextra.clock DateFormat -string "EEE d MMM h:mm:ss a"
#+END_SRC

**** Set default Finder location to =$HOME=
#+BEGIN_SRC bash :noweb-ref osx-default-finder-location-conf
ansi --green "Set Default Finder Location to Home Folder"
defaults write com.apple.finder NewWindowTarget -string "PfLo" &&
	defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}"
#+END_SRC

**** Kill Finder to apply =defaults=
#+BEGIN_SRC bash :noweb-ref osx-killall-finder-conf
ansi --green "Killing Finder.."
killall Finder
#+END_SRC
**** Kill =SystemUIServer= for UI defaults
#+BEGIN_SRC bash :noweb-ref osx-killall-systemui-conf
ansi --green "Killing SystemUIServer"
killall SystemUIServer
#+END_SRC

**** Enable =locate= database
#+BEGIN_SRC bash :noweb-ref osx-locate-service-conf
ansi --green "Build Locate Database"
sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist
#+END_SRC

**** Enable firewall
#+BEGIN_SRC bash :noweb-ref osx-firewall-conf
ansi --green "Enable firewall"
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on
#+END_SRC
**** Set network clock sync
#+BEGIN_SRC bash :noweb-ref osx-clock-network-conf
ansi --green "Set Clock Using Network Time"
sudo systemsetup setusingnetworktime on
#+END_SRC

*** Linux :linux:
General Linux commands

- Speed up keyboard
#+BEGIN_SRC shell :cache no
xset r rate 180 40
#+END_SRC
*** Archlinux :archlinux:
Archlinux related configuration.
**** Find all =*.pacnew= files in =/etc=
#+BEGIN_SRC shell
find /etc -regextype posix-extended -regex ".+\.pac(new|save)"
#+END_SRC
**** List =pacman= packages ignoring foreign packages (AUR, etc).
#+BEGIN_SRC sh :results file :file Pacfile :output-dir .
pacman -Qqen
#+END_SRC
**** Get list of foreing (AUR, etc) packages with =pacman=.
  #+BEGIN_SRC sh :results file :file Aurfile :output-dir .
  pacman -Qqem
  #+END_SRC

**** Pacman conf
This enables color, total downloads, check space and sets verbose PKG list when
running =pacman=.

#+BEGIN_SRC bash :noweb-ref archlinux-pacman-conf
sudo sed -i '/Color$/s/^#//g' /etc/pacman.conf
sudo sed -i '/TotalDownload$/s/^#//g' /etc/pacman.conf
sudo sed -i '/CheckSpace$/s/^#//g' /etc/pacman.conf
sudo sed -i '/VerbosePkgLists$/s/^#//g' /etc/pacman.conf
#+END_SRC

**** Set timezone
Enable =ntp= sync, set timezone to Sao Paulo and sync hardware clock.
#+BEGIN_SRC bash :noweb-ref archlinux-timezone-conf
sudo timedatectl set-ntp true
sudo ln -sf /usr/share/zoneinfo/Ameriaca/Sao_Paulo /etc/localtime
sudo hwclock --systohc
#+END_SRC

**** Set locale
Set locale to =en_US.UTF-8= by default and generate the locale file.
#+BEGIN_SRC bash :noweb-ref archlinux-locale-conf
sudo sed -i '/en_US.UTF-8$/s/^#//g' /etc/pacman.conf
sudo locale-gen
#+END_SRC

*** Docker :docker:
- Allow Docker runs with non-root user.
#+BEGIN_SRC shell
sudo usermod -aG docker $USER
newgrp docker
#+END_SRC
*** Set SSH permissions :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref ssh-perms
chmod 755 "$HOME"/.ssh
[[ -f "$HOME/.ssh/id_rsa" ]] && chmod 600 "$HOME"/.ssh/id_rsa
[[ -f "$HOME/.ssh/id_rsa.pub" ]] && chmod 600 "$HOME"/.ssh/id_rsa.pub
#+END_SRC

*** Set GNUPG permissions :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref gnupg-perms
chown -R $(whoami) ~/.gnupg/
# Also correct the permissions and access rights on the directory
chmod 700 ~/.gnupg/*
chmod 700 ~/.gnupg
#+END_SRC
*** Initialize chezmoi :osx:archlinux:
Change the =$HOME/dotfiles= directory
#+BEGIN_SRC bash
chezmoi init -S $HOME/dotfiles
#+END_SRC

*** Ensure important directories :osx:archlinux:
#+BEGIN_SRC bash :noweb-ref ensure-dirs
mkdir -pv $HOME/mail
mkdir -pv $HOME/mail/.attachments
mkdir -pv $HOME/workspace/opt
mkdir -pv $HOME/workspace/go
#+END_SRC
*** Apply Chezmoi config files
#+BEGIN_SRC bash
chezmoi apply -v
#+END_SRC
** Dotfiles configuration :dotfiles:
*** Chezmoi
**** Configuration
***** Chezmoi default variables

When =secret= is set to =true= (default), it will apply all template files which
requires any secret to be applied. If chezmoi is running in a CI environment,
set =secret= to =false= by default.
#+BEGIN_SRC yaml :noweb-ref chezmoi-default-vars
{{- $secrets := true -}}
...

{{- if (env "CI") -}}
{{- $secrets = false -}}
...
{{- end -}}
#+END_SRC
***** Chezmoi prompts
If the =ASK= env is defined (=ASK=1 chezmoi init -S <dotfiles-dir>=), Chezmoi
will prompt for the default [[*Chezmoi default variables][variables]].
#+BEGIN_SRC yaml :noweb-ref chezmoi-prompt-vars
{{- if (env "ASK") }}
{{- $secrets := promptBool "secrets" -}}
{{- $name := promptString "full name" -}}
...
{{- end -}}
#+END_SRC
***** Chezmoi data configuration
Variables are then passed to the =data= section
#+BEGIN_SRC yaml :noweb-ref chezmoi-data-vars
...
data:
  secrets: {{ $secrets }}
  headless: {{ $headless }}
  email: {{ $email }}
  ...
#+END_SRC

***** Chezmoi secrets configuration
If secrets is =true=, then apply =bitwarden='s item ids
#+BEGIN_SRC yaml :noweb-ref chezmoi-bitwarden-vars
{{- if $secrets }}
  bitwarden:
    jira: 8c7e36c5-a859-4fe6-a0c2-acb500c08fff
    ...
{{- end -}}
#+END_SRC
***** Chezmoi final configuration
Finally, from the previous Chezmoi section, this is the generated configuration
file.
#+INCLUDE: .chezmoi.yaml.tmpl src yaml
**** Chezmoi ignore
***** Ignore by distribution
Since Chezmoi allows multiple platforms, we can handle which files we want
Chezmoi to ignore based on the =OS= type.
#+BEGIN_SRC text :noweb-ref chezmoi-ignore-by-os
# Don't copy the following files if OS is OSX
{{- if ne .chezmoi.os "linux" }}
.xinitrc
.xsession
...
{{- end }}

# Don't copy the following files if OS is Linux
{{- if ne .chezmoi.os "darwin" }}
.skhdrc
...
{{- end }}
#+END_SRC

***** Ignore if =secrets= is not set
Remember the =secret= variable set in [[*Chezmoi default variables][default variables]]? Since this dotfiles is
ran on a CI, we don't want to apply any configuration file that contains any
secret. Since the =CI= environment variable is set, =secrets= defaults to
=false= .
#+BEGIN_SRC text :noweb-ref chezmoi-ignore-secrets
{{- if not .secrets }}
.mbsyncrc
.config/msmtp
.wakatime.cfg
...
{{- end }}
#+END_SRC
***** Chezmoi final =.chezmoiignore=
The final configuration
#+INCLUDE: .chezmoiignore src text
***** Archive :ARCHIVE:
****** Defaults to ignore
:PROPERTIES:
:ARCHIVE_TIME: 2021-02-27 Sat 23:30
:END:
#+BEGIN_SRC text :noweb-ref chezmoi-ignore-defaults
...
#+END_SRC
*** Wakatime
The following in my Wakatime configuration. The API key is set automatically by
Chezmoi, see [[*Chezmoi secrets configuration][Chezmoi secrets configuration]].
#+INCLUDE: dot_wakatime.cfg.tmpl src conf

*** Pythonrc
The following enables autocomplete when on a standard python interpreter and
keeps history around sessions.
#+INCLUDE: dot_pythonrc src python
*** Xorg :archlinux:
**** xmodmap
#+INCLUDE: dot_Xmodmap src text
**** XResources
Create =Xresources= file with Gruvbox as default theme.
#+INCLUDE: dot_xresources src text
**** xinitrc
Create =xinitrc= which gets called by [[*xsession][=xsession=]].
#+INCLUDE: executable_dot_xinitrc src shell
**** xsession
Start =i3wm= automatically on Xsession
#+INCLUDE: executable_dot_xsession src shell
*** Tmux
**** Gitmux
The following is [[https://github.com/arl/gitmux][Gitmux]]'s configuration file.
#+INCLUDE: dot_gitmux.conf src conf
**** Tmux conf
The =tmux.conf= requires [[https://github.com/tmux-plugins/tpm][TPM]] to work.
#+INCLUDE: dot_tmux.conf src conf
**** Archive :ARCHIVE:
***** CANCELED Tmux base16 gruvbox theme
CLOSED: [2021-02-27 Sat 22:56]
:PROPERTIES:
:ARCHIVE_TIME: 2021-02-27 Sat 22:59
:END:
:LOGBOOK:
- State "CANCELED"   from              [2021-02-27 Sat 22:56]
:END:

This isn't needed as I am now using [[github:Alkindi42/tmux-bitwarden][Alkindi42/tmux-bitwarden]].

The following configures theme defaults for tmux
#+BEGIN_SRC conf :tangle dot_tmux-gruvbox-dark.conf
# from: https://github.com/LawAbidingCactus/tmux-gruvbox-truecolor
### theme settings ###

# window separators
set-option -wg window-status-separator ""

# monitor window changes
set-option -wg monitor-activity on
set-option -wg monitor-bell on

# set statusbar update interval
set-option -g status-interval 1

### colorscheme ###

# change window screen colors
set-option -wg mode-style bg="#FE8019",fg="#3C3836"

# default statusbar colors (terminal bg should be #282828)
set-option -g status-style bg=terminal,fg="#A89984"

# default window title colors
set-option -wg window-status-style bg="#3C3836",fg="#7C6F64"

# colors for windows with activity
set-option -wg window-status-activity-style bg="#3C3836",fg="#A89984"

# colors for windows with bells
set-option -wg window-status-bell-style bg="#3C3836",fg="#FE8019"

# active window title colors
set-option -wg window-status-current-style bg="#FE8019",fg="#3C3836"

# pane border
set-option -g pane-active-border-style fg="#FE8019"
set-option -g pane-border-style fg="#3C3836"

# message info
set-option -g message-style bg="#FE8019",fg="#3C3836"

# writing commands inactive
set-option -g message-command-style bg="#A89984",fg="#3C3836"

# pane number display
set-option -g display-panes-active-colour "#FE8019"
set-option -g display-panes-colour "#3C3836"

# clock
set-option -wg clock-mode-colour "#FE8019"

# copy mode highlighting
%if #{>=:#{version},3.2}
    set-option -wg copy-mode-match-style "bg=#A89984,fg=#3C3836"
    set-option -wg copy-mode-current-match-style "bg=#FE8109,fg=#3C3836"
%endif

set -g status-right-length 150

# statusbar formatting
# "#fe8019" MUST be in lowercase here (conflicts with statusline alias otherwise)
set-option -g status-left "#{session_name} "
set-option -g status-right "#{prefix_highlight} #{battery_icon} #{battery_percentage} | %d-%m-%Y %H:%M:%S | Online: #{online_status}| #{weather} | #(gitmux -cfg ~/.gitmux.conf '#{pane_current_path}') "

set-option -wg window-status-current-format " #{window_index} #{window_name} "
set-option -wg window-status-format " #{window_index} #{window_name} "
#+END_SRC
*** Dircolors
#+INCLUDE: dot_dircolors src shell
*** Curl
#+INCLUDE: dot_curlrc src rc
*** Inputrc
This enables autocomplete for any program that uses =readline= and enabled =vi=
keybinding.
#+INCLUDE: dot_inputrc src rc
*** Editorconfig
#+INCLUDE: dot_editorconfig src toml
*** Skhdrc :osx:
Sets OSX keybindings
#+INCLUDE: dot_skhdrc src rc
*** Zsh
My zsh setup if organized as following:
- =.zshrc= includes all zsh files related to the configuration
- =.zsh/aliases.zsh= holds all aliases I use
- =.zsh/evals.zsh= holds all async evaluations, such as =pyenv= and =dircolors=
- =.zsh/exports.zsh= holds all exported variables
- =.zsh/git_aliases.zsh= holds all git related aliases
- =.zsh/gpg_agent.zsh= handles GnuPG agent
- =.zsh/history.zsh= configures how command history is saved
- =.zsh/init.zsh= handles all important initialization that requires everything
  to work
- =.zsh/keys.zsh= keybindings
- =.zsh/plugins.txt= plugins that are managed with Antibody
- =.zsh/stack.zsh= configures shell stack related configuration

**** plugins.txt
#+INCLUDE: dot_zsh/plugins.txt src text
**** keys.zsh
#+INCLUDE: dot_zsh/keys.zsh src shell
**** stack.zsh
#+INCLUDE: dot_zsh/stack.zsh src shell
**** history.zsh
#+INCLUDE: dot_zsh/history.zsh src shell
**** gpg-agent.zsh
#+INCLUDE: dot_zsh/gpg-agent.zsh src shell
**** exports.zsh
#+INCLUDE: dot_zsh/exports.zsh src shell
**** aliases.zsh
#+INCLUDE: dot_zsh/aliases.zsh src shell
**** git_aliases.zsh
#+INCLUDE: dot_zsh/git_aliases.zsh src shell
**** init.zsh
#+INCLUDE: dot_zsh/init.zsh src shell
**** evals.zsh
#+INCLUDE: dot_zsh/evals.zsh src shell
**** .zshrc
For performance, this first checks if the generated plugin bundle is in
=$HOME/.zsh_plugins.sh=. If not, it will generate upon start.

#+INCLUDE: dot_zshrc src shell
*** Git
**** Git config
The =user= section is auto generated with Chezmoi.
#+INCLUDE: dot_gitconfig.tmpl src conf
**** Git templates
I keep a few Git templates, which are applied on =git init= or on =clone=.

***** Show a small reminder of commits when running =git commit=

Note: The new line at the beginning is important.
#+INCLUDE: dot_gittemplates/commit src text
*** Vim
**** vimrc
The following configuration requires both all plugins to be install and VimPlug.
#+INCLUDE: dot_vim/vimrc src viml
**** plugins.vim
#+INCLUDE: dot_vim/plugins.vim src viml
**** nvimrc
This allows =nvim= to read =vim='s configuration.
#+INCLUDE: dot_config/nvim/init.vim src viml
*** Emacs
**** Snippets
The following are snippets that are automatically applied on a new file.

***** Org template
#+INCLUDE: dot_doom.d/snippets/org-mode/__ src elisp
***** Python template
#+INCLUDE: dot_doom.d/snippets/python-mode/__ src python
** Scripts :scripts:
The following scripts is a compilation of all the previous commands, together
with some extra =OS= checks and a custom =echo= with colored output.

*** Script base :noexport:
#+NAME: script-header
#+BEGIN_SRC shell :noweb: yes :exports none
#!/usr/bin/env bash
set -euo pipefail
#+END_SRC

This gets the current path the script is running, which /should/ be =scripts/=
and allows sourcing any file in this directory.

#+NAME: script-src-dir
#+BEGIN_SRC shell :noweb: yes :exports none
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
#+END_SRC

Source the =base.sh= script which includes script helpers.
#+NAME: script-base-source
#+BEGIN_SRC shell :noweb: yes :exports none
. "$DIR/base.sh"
#+END_SRC

Source [[https://github.com/fidian/ansi/blob/master/ansi][=ansi=]] for pretty =echo=.
#+NAME: script-ansi-source
#+BEGIN_SRC shell :noweb: yes :exports none
. "$DIR/ansi"
#+END_SRC

Source =buildcheck= for exiting when running on CI.
#+NAME: script-buildcheck-source
#+BEGIN_SRC shell :noweb: yes :exports none
. "$DIR/buildcheck.sh"
#+END_SRC

*** Homebrew install final script
#+INCLUDE: scripts/install_homebrew.sh src shell
*** Chezmoi install final script
#+INCLUDE: scripts/install_chezmoi.sh src shell
*** Install packages final script
#+INCLUDE: scripts/install_deps.sh src shell
*** Install AUR packages final script
#+INCLUDE: scripts/install_aur_packages.sh src shell
*** Install Git packages final script
#+INCLUDE: scripts/install_git_repos.sh src shell
*** Configure OSX final script
#+INCLUDE: scripts/set_osx_defaults.sh src shell
*** Configure Archlinux final script
#+INCLUDE: scripts/set_archlinux_defaults.sh src shell
*** Configure system final script
#+INCLUDE: scripts/configure_sys.sh src shell
*** SSH permission final script
#+INCLUDE: scripts/set_ssh_perms.sh src shell
*** GNUPG permission final script
#+INCLUDE: scripts/fix_gnupg_perms.sh src shell
*** Ensure directory final script
#+INCLUDE: scripts/ensure_directories.sh src shell
